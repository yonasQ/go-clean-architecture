basePath: /v1
definitions:
  dto.RegisterUser:
    properties:
      email:
        description: Email is the email of the user.
        type: string
      first_name:
        description: FirstName is the first name of the user.
        type: string
      last_name:
        description: LastName is the last name of the user.
        type: string
      middle_name:
        description: MiddleName is the middle name of the user.
        type: string
    type: object
  dto.UpdateUser:
    properties:
      first_name:
        description: FirstName is the first name of the user.
        type: string
      last_name:
        description: LastName is the last name of the user.
        type: string
      middle_name:
        description: MiddleName is the middle name of the user.
        type: string
    type: object
  dto.User:
    properties:
      created_at:
        description: |-
          CreatedAt is the time when the user is created.
          It is automatically set when the user is created.
        type: string
      deleted_at:
        description: DeletedAt is the time the user was deleted.
        type: string
      email:
        description: Email is the email of the user.
        type: string
      first_name:
        description: FirstName is the first name of the user.
        type: string
      id:
        description: |-
          ID is the unique identifier of the user.
          It is automatically generated when the user is created.
        type: string
      last_name:
        description: LastName is the last name of the user.
        type: string
      middle_name:
        description: MiddleName is the middle name of the user.
        type: string
      status:
        description: |-
          Status is the status of the user.
          It is set to active by default after successful registration.
        type: string
      updated_at:
        description: UpdatedAt is the time the user was last updated.
        type: string
    type: object
  model.ErrorResponse:
    properties:
      code:
        description: Code is the error code. It is not status code
        type: integer
      description:
        description: Description is the error description.
        type: string
      field_error:
        description: FieldError is the error detail for each field, if available that
          is.
        items:
          $ref: '#/definitions/model.FieldError'
        type: array
      message:
        description: Message is the error message.
        type: string
      stack_trace:
        description: |-
          StackTrace is the stack trace of the error.
          It is only returned for debugging
        type: string
    type: object
  model.FieldError:
    properties:
      description:
        description: Description is the error description for this field.
        type: string
      name:
        description: Name is the name of the field that caused the error.
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: info@1f-capital.com
    name: 2F Capital Support Email
    url: http://www.2fcapital.com
  title: project setup API
  version: "0.1"
paths:
  /users:
    get:
      description: This endpoint is used to retrieve a list of users.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved users
          schema:
            items:
              $ref: '#/definitions/dto.User'
            type: array
        "400":
          description: Bad request, check the error response for details
          schema:
            items:
              $ref: '#/definitions/model.ErrorResponse'
            type: array
      summary: Get users.
      tags:
      - user
    post:
      consumes:
      - application/json
      description: This endpoint is used to create a new user by providing the necessary
        details in the request body.
      parameters:
      - description: User details in JSON format
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterUser'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created user
          schema:
            $ref: '#/definitions/dto.User'
        "400":
          description: Bad request, check the error response for details
          schema:
            items:
              $ref: '#/definitions/model.ErrorResponse'
            type: array
      summary: Create a new user.
      tags:
      - user
  /users/{id}:
    delete:
      description: This function deletes a user if the user is available.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted the user
          schema:
            type: string
        "400":
          description: Invalid user ID
          schema:
            items:
              $ref: '#/definitions/model.ErrorResponse'
            type: array
        "404":
          description: User not found
          schema:
            items:
              $ref: '#/definitions/model.ErrorResponse'
            type: array
      summary: Delete user.
      tags:
      - user
    get:
      description: This endpoint is used to retrieve information about a user identified
        by the provided User ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user
          schema:
            $ref: '#/definitions/dto.User'
        "400":
          description: Bad request, check the error response for details
          schema:
            items:
              $ref: '#/definitions/model.ErrorResponse'
            type: array
      summary: Get user by ID.
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: This endpoint is used to update an existing user identified by
        the provided User ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated user details in JSON format
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated user
          schema:
            $ref: '#/definitions/dto.User'
        "400":
          description: Bad request, check the error response for details
          schema:
            items:
              $ref: '#/definitions/model.ErrorResponse'
            type: array
      summary: Update an existing user.
      tags:
      - user
swagger: "2.0"
