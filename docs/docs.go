// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "2F Capital Support Email",
            "url": "http://www.2fcapital.com",
            "email": "info@1f-capital.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/users": {
            "get": {
                "description": "This endpoint is used to retrieve a list of users.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get users.",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.User"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request, check the error response for details",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server errors, check the error response for details",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Response"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "This endpoint is used to create a new user by providing the necessary details in the request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Create a new user.",
                "parameters": [
                    {
                        "description": "User details in JSON format",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterUser"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created user",
                        "schema": {
                            "$ref": "#/definitions/dto.User"
                        }
                    },
                    "400": {
                        "description": "Bad request, check the error response for details",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server errors, check the error response for details",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Response"
                            }
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "This endpoint is used to retrieve information about a user identified by the provided User ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user by ID.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user",
                        "schema": {
                            "$ref": "#/definitions/dto.User"
                        }
                    },
                    "400": {
                        "description": "Bad request, check the error response for details",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server errors, check the error response for details",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Response"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "This function deletes a user if the user is available.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "delete user"
                ],
                "summary": "Delete user.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted the user",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server errors, check the error response for details",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Response"
                            }
                        }
                    }
                }
            },
            "patch": {
                "description": "This endpoint is used to update an existing user identified by the provided User ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update an existing user.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated user details in JSON format",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated user",
                        "schema": {
                            "$ref": "#/definitions/dto.User"
                        }
                    },
                    "400": {
                        "description": "Bad request, check the error response for details",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server errors, check the error response for details",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Response"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.RegisterUser": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "Email is the email of the user.",
                    "type": "string"
                },
                "first_name": {
                    "description": "FirstName is the first name of the user.",
                    "type": "string"
                },
                "last_name": {
                    "description": "LastName is the last name of the user.",
                    "type": "string"
                },
                "middle_name": {
                    "description": "MiddleName is the middle name of the user.",
                    "type": "string"
                }
            }
        },
        "dto.UpdateUser": {
            "type": "object",
            "properties": {
                "first_name": {
                    "description": "FirstName is the first name of the user.",
                    "type": "string"
                },
                "last_name": {
                    "description": "LastName is the last name of the user.",
                    "type": "string"
                },
                "middle_name": {
                    "description": "MiddleName is the middle name of the user.",
                    "type": "string"
                }
            }
        },
        "dto.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt is the time when the user is created.\nIt is automatically set when the user is created.",
                    "type": "string"
                },
                "deleted_at": {
                    "description": "DeletedAt is the time the user was deleted.",
                    "type": "string"
                },
                "email": {
                    "description": "Email is the email of the user.",
                    "type": "string"
                },
                "first_name": {
                    "description": "FirstName is the first name of the user.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique identifier of the user.\nIt is automatically generated when the user is created.",
                    "type": "string"
                },
                "last_name": {
                    "description": "LastName is the last name of the user.",
                    "type": "string"
                },
                "middle_name": {
                    "description": "MiddleName is the middle name of the user.",
                    "type": "string"
                },
                "status": {
                    "description": "Status is the status of the user.\nIt is set to active by default after successful registration.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is the time the user was last updated.",
                    "type": "string"
                }
            }
        },
        "model.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Code is the error code. It is not status code",
                    "type": "integer"
                },
                "description": {
                    "description": "Description is the error description.",
                    "type": "string"
                },
                "field_error": {
                    "description": "FieldError is the error detail for each field, if available that is.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.FieldError"
                    }
                },
                "message": {
                    "description": "Message is the error message.",
                    "type": "string"
                },
                "stack_trace": {
                    "description": "StackTrace is the stack trace of the error.\nIt is only returned for debugging",
                    "type": "string"
                }
            }
        },
        "model.FieldError": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description is the error description for this field.",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of the field that caused the error.",
                    "type": "string"
                }
            }
        },
        "model.MetaData": {
            "type": "object",
            "properties": {
                "extra": {
                    "description": "Extra contains other response specific data"
                },
                "page": {
                    "description": "Page  is used to identify the starting point to return rows from a result set",
                    "type": "integer"
                },
                "per_page": {
                    "description": "PerPage is the number of records to return after filtering",
                    "type": "integer"
                },
                "sort": {
                    "description": "Sort is used to sort the result set in ascending or descending order",
                    "type": "string"
                },
                "total": {
                    "description": "Total is the total number of data without pagination",
                    "type": "integer"
                }
            }
        },
        "model.Response": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data contains the actual data of the response."
                },
                "error": {
                    "description": "Error contains the error detail if the request was not successful.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    ]
                },
                "meta_data": {
                    "description": "MetaData contains additional data like filtering, pagination, etc.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.MetaData"
                        }
                    ]
                },
                "ok": {
                    "description": "OK is only true if the request was successful.",
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1",
	Host:             "localhost:8000",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "project setup API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
